/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsd.cse124;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-9")
public class Twitter {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public void createUser(String handle) throws AlreadyExistsException, org.apache.thrift.TException;

    public void subscribe(String handle, String theirhandle) throws NoSuchUserException, org.apache.thrift.TException;

    public void unsubscribe(String handle, String theirhandle) throws NoSuchUserException, org.apache.thrift.TException;

    public void post(String handle, String tweetString) throws NoSuchUserException, TweetTooLongException, org.apache.thrift.TException;

    public List<Tweet> readTweetsByUser(String handle, int howmany) throws NoSuchUserException, org.apache.thrift.TException;

    public List<Tweet> readTweetsBySubscription(String handle, int howmany) throws NoSuchUserException, org.apache.thrift.TException;

    public void star(String handle, long tweetId) throws NoSuchUserException, NoSuchTweetException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createUser(String handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void subscribe(String handle, String theirhandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unsubscribe(String handle, String theirhandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void post(String handle, String tweetString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readTweetsByUser(String handle, int howmany, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readTweetsBySubscription(String handle, int howmany, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void star(String handle, long tweetId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public void createUser(String handle) throws AlreadyExistsException, org.apache.thrift.TException
    {
      send_createUser(handle);
      recv_createUser();
    }

    public void send_createUser(String handle) throws org.apache.thrift.TException
    {
      createUser_args args = new createUser_args();
      args.setHandle(handle);
      sendBase("createUser", args);
    }

    public void recv_createUser() throws AlreadyExistsException, org.apache.thrift.TException
    {
      createUser_result result = new createUser_result();
      receiveBase(result, "createUser");
      if (result.existsx != null) {
        throw result.existsx;
      }
      return;
    }

    public void subscribe(String handle, String theirhandle) throws NoSuchUserException, org.apache.thrift.TException
    {
      send_subscribe(handle, theirhandle);
      recv_subscribe();
    }

    public void send_subscribe(String handle, String theirhandle) throws org.apache.thrift.TException
    {
      subscribe_args args = new subscribe_args();
      args.setHandle(handle);
      args.setTheirhandle(theirhandle);
      sendBase("subscribe", args);
    }

    public void recv_subscribe() throws NoSuchUserException, org.apache.thrift.TException
    {
      subscribe_result result = new subscribe_result();
      receiveBase(result, "subscribe");
      if (result.userx != null) {
        throw result.userx;
      }
      return;
    }

    public void unsubscribe(String handle, String theirhandle) throws NoSuchUserException, org.apache.thrift.TException
    {
      send_unsubscribe(handle, theirhandle);
      recv_unsubscribe();
    }

    public void send_unsubscribe(String handle, String theirhandle) throws org.apache.thrift.TException
    {
      unsubscribe_args args = new unsubscribe_args();
      args.setHandle(handle);
      args.setTheirhandle(theirhandle);
      sendBase("unsubscribe", args);
    }

    public void recv_unsubscribe() throws NoSuchUserException, org.apache.thrift.TException
    {
      unsubscribe_result result = new unsubscribe_result();
      receiveBase(result, "unsubscribe");
      if (result.userx != null) {
        throw result.userx;
      }
      return;
    }

    public void post(String handle, String tweetString) throws NoSuchUserException, TweetTooLongException, org.apache.thrift.TException
    {
      send_post(handle, tweetString);
      recv_post();
    }

    public void send_post(String handle, String tweetString) throws org.apache.thrift.TException
    {
      post_args args = new post_args();
      args.setHandle(handle);
      args.setTweetString(tweetString);
      sendBase("post", args);
    }

    public void recv_post() throws NoSuchUserException, TweetTooLongException, org.apache.thrift.TException
    {
      post_result result = new post_result();
      receiveBase(result, "post");
      if (result.userx != null) {
        throw result.userx;
      }
      if (result.longx != null) {
        throw result.longx;
      }
      return;
    }

    public List<Tweet> readTweetsByUser(String handle, int howmany) throws NoSuchUserException, org.apache.thrift.TException
    {
      send_readTweetsByUser(handle, howmany);
      return recv_readTweetsByUser();
    }

    public void send_readTweetsByUser(String handle, int howmany) throws org.apache.thrift.TException
    {
      readTweetsByUser_args args = new readTweetsByUser_args();
      args.setHandle(handle);
      args.setHowmany(howmany);
      sendBase("readTweetsByUser", args);
    }

    public List<Tweet> recv_readTweetsByUser() throws NoSuchUserException, org.apache.thrift.TException
    {
      readTweetsByUser_result result = new readTweetsByUser_result();
      receiveBase(result, "readTweetsByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userx != null) {
        throw result.userx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readTweetsByUser failed: unknown result");
    }

    public List<Tweet> readTweetsBySubscription(String handle, int howmany) throws NoSuchUserException, org.apache.thrift.TException
    {
      send_readTweetsBySubscription(handle, howmany);
      return recv_readTweetsBySubscription();
    }

    public void send_readTweetsBySubscription(String handle, int howmany) throws org.apache.thrift.TException
    {
      readTweetsBySubscription_args args = new readTweetsBySubscription_args();
      args.setHandle(handle);
      args.setHowmany(howmany);
      sendBase("readTweetsBySubscription", args);
    }

    public List<Tweet> recv_readTweetsBySubscription() throws NoSuchUserException, org.apache.thrift.TException
    {
      readTweetsBySubscription_result result = new readTweetsBySubscription_result();
      receiveBase(result, "readTweetsBySubscription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userx != null) {
        throw result.userx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readTweetsBySubscription failed: unknown result");
    }

    public void star(String handle, long tweetId) throws NoSuchUserException, NoSuchTweetException, org.apache.thrift.TException
    {
      send_star(handle, tweetId);
      recv_star();
    }

    public void send_star(String handle, long tweetId) throws org.apache.thrift.TException
    {
      star_args args = new star_args();
      args.setHandle(handle);
      args.setTweetId(tweetId);
      sendBase("star", args);
    }

    public void recv_star() throws NoSuchUserException, NoSuchTweetException, org.apache.thrift.TException
    {
      star_result result = new star_result();
      receiveBase(result, "star");
      if (result.userx != null) {
        throw result.userx;
      }
      if (result.tweetx != null) {
        throw result.tweetx;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void createUser(String handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createUser_call method_call = new createUser_call(handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      public createUser_call(String handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createUser_args args = new createUser_args();
        args.setHandle(handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AlreadyExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createUser();
      }
    }

    public void subscribe(String handle, String theirhandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribe_call method_call = new subscribe_call(handle, theirhandle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      private String theirhandle;
      public subscribe_call(String handle, String theirhandle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
        this.theirhandle = theirhandle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscribe_args args = new subscribe_args();
        args.setHandle(handle);
        args.setTheirhandle(theirhandle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NoSuchUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_subscribe();
      }
    }

    public void unsubscribe(String handle, String theirhandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unsubscribe_call method_call = new unsubscribe_call(handle, theirhandle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unsubscribe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      private String theirhandle;
      public unsubscribe_call(String handle, String theirhandle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
        this.theirhandle = theirhandle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unsubscribe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unsubscribe_args args = new unsubscribe_args();
        args.setHandle(handle);
        args.setTheirhandle(theirhandle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NoSuchUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unsubscribe();
      }
    }

    public void post(String handle, String tweetString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      post_call method_call = new post_call(handle, tweetString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class post_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      private String tweetString;
      public post_call(String handle, String tweetString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
        this.tweetString = tweetString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("post", org.apache.thrift.protocol.TMessageType.CALL, 0));
        post_args args = new post_args();
        args.setHandle(handle);
        args.setTweetString(tweetString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NoSuchUserException, TweetTooLongException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_post();
      }
    }

    public void readTweetsByUser(String handle, int howmany, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readTweetsByUser_call method_call = new readTweetsByUser_call(handle, howmany, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readTweetsByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      private int howmany;
      public readTweetsByUser_call(String handle, int howmany, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
        this.howmany = howmany;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readTweetsByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readTweetsByUser_args args = new readTweetsByUser_args();
        args.setHandle(handle);
        args.setHowmany(howmany);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Tweet> getResult() throws NoSuchUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readTweetsByUser();
      }
    }

    public void readTweetsBySubscription(String handle, int howmany, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readTweetsBySubscription_call method_call = new readTweetsBySubscription_call(handle, howmany, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readTweetsBySubscription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      private int howmany;
      public readTweetsBySubscription_call(String handle, int howmany, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
        this.howmany = howmany;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readTweetsBySubscription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readTweetsBySubscription_args args = new readTweetsBySubscription_args();
        args.setHandle(handle);
        args.setHowmany(howmany);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Tweet> getResult() throws NoSuchUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readTweetsBySubscription();
      }
    }

    public void star(String handle, long tweetId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      star_call method_call = new star_call(handle, tweetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class star_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String handle;
      private long tweetId;
      public star_call(String handle, long tweetId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handle = handle;
        this.tweetId = tweetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("star", org.apache.thrift.protocol.TMessageType.CALL, 0));
        star_args args = new star_args();
        args.setHandle(handle);
        args.setTweetId(tweetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NoSuchUserException, NoSuchTweetException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_star();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("createUser", new createUser());
      processMap.put("subscribe", new subscribe());
      processMap.put("unsubscribe", new unsubscribe());
      processMap.put("post", new post());
      processMap.put("readTweetsByUser", new readTweetsByUser());
      processMap.put("readTweetsBySubscription", new readTweetsBySubscription());
      processMap.put("star", new star());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class createUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUser_args> {
      public createUser() {
        super("createUser");
      }

      public createUser_args getEmptyArgsInstance() {
        return new createUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createUser_result getResult(I iface, createUser_args args) throws org.apache.thrift.TException {
        createUser_result result = new createUser_result();
        try {
          iface.createUser(args.handle);
        } catch (AlreadyExistsException existsx) {
          result.existsx = existsx;
        }
        return result;
      }
    }

    public static class subscribe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribe_args> {
      public subscribe() {
        super("subscribe");
      }

      public subscribe_args getEmptyArgsInstance() {
        return new subscribe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subscribe_result getResult(I iface, subscribe_args args) throws org.apache.thrift.TException {
        subscribe_result result = new subscribe_result();
        try {
          iface.subscribe(args.handle, args.theirhandle);
        } catch (NoSuchUserException userx) {
          result.userx = userx;
        }
        return result;
      }
    }

    public static class unsubscribe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unsubscribe_args> {
      public unsubscribe() {
        super("unsubscribe");
      }

      public unsubscribe_args getEmptyArgsInstance() {
        return new unsubscribe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unsubscribe_result getResult(I iface, unsubscribe_args args) throws org.apache.thrift.TException {
        unsubscribe_result result = new unsubscribe_result();
        try {
          iface.unsubscribe(args.handle, args.theirhandle);
        } catch (NoSuchUserException userx) {
          result.userx = userx;
        }
        return result;
      }
    }

    public static class post<I extends Iface> extends org.apache.thrift.ProcessFunction<I, post_args> {
      public post() {
        super("post");
      }

      public post_args getEmptyArgsInstance() {
        return new post_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public post_result getResult(I iface, post_args args) throws org.apache.thrift.TException {
        post_result result = new post_result();
        try {
          iface.post(args.handle, args.tweetString);
        } catch (NoSuchUserException userx) {
          result.userx = userx;
        } catch (TweetTooLongException longx) {
          result.longx = longx;
        }
        return result;
      }
    }

    public static class readTweetsByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readTweetsByUser_args> {
      public readTweetsByUser() {
        super("readTweetsByUser");
      }

      public readTweetsByUser_args getEmptyArgsInstance() {
        return new readTweetsByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readTweetsByUser_result getResult(I iface, readTweetsByUser_args args) throws org.apache.thrift.TException {
        readTweetsByUser_result result = new readTweetsByUser_result();
        try {
          result.success = iface.readTweetsByUser(args.handle, args.howmany);
        } catch (NoSuchUserException userx) {
          result.userx = userx;
        }
        return result;
      }
    }

    public static class readTweetsBySubscription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readTweetsBySubscription_args> {
      public readTweetsBySubscription() {
        super("readTweetsBySubscription");
      }

      public readTweetsBySubscription_args getEmptyArgsInstance() {
        return new readTweetsBySubscription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readTweetsBySubscription_result getResult(I iface, readTweetsBySubscription_args args) throws org.apache.thrift.TException {
        readTweetsBySubscription_result result = new readTweetsBySubscription_result();
        try {
          result.success = iface.readTweetsBySubscription(args.handle, args.howmany);
        } catch (NoSuchUserException userx) {
          result.userx = userx;
        }
        return result;
      }
    }

    public static class star<I extends Iface> extends org.apache.thrift.ProcessFunction<I, star_args> {
      public star() {
        super("star");
      }

      public star_args getEmptyArgsInstance() {
        return new star_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public star_result getResult(I iface, star_args args) throws org.apache.thrift.TException {
        star_result result = new star_result();
        try {
          iface.star(args.handle, args.tweetId);
        } catch (NoSuchUserException userx) {
          result.userx = userx;
        } catch (NoSuchTweetException tweetx) {
          result.tweetx = tweetx;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("createUser", new createUser());
      processMap.put("subscribe", new subscribe());
      processMap.put("unsubscribe", new unsubscribe());
      processMap.put("post", new post());
      processMap.put("readTweetsByUser", new readTweetsByUser());
      processMap.put("readTweetsBySubscription", new readTweetsBySubscription());
      processMap.put("star", new star());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class createUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createUser_args, Void> {
      public createUser() {
        super("createUser");
      }

      public createUser_args getEmptyArgsInstance() {
        return new createUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createUser_result result = new createUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createUser_result result = new createUser_result();
            if (e instanceof AlreadyExistsException) {
                        result.existsx = (AlreadyExistsException) e;
                        result.setExistsxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createUser(args.handle,resultHandler);
      }
    }

    public static class subscribe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscribe_args, Void> {
      public subscribe() {
        super("subscribe");
      }

      public subscribe_args getEmptyArgsInstance() {
        return new subscribe_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            subscribe_result result = new subscribe_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            subscribe_result result = new subscribe_result();
            if (e instanceof NoSuchUserException) {
                        result.userx = (NoSuchUserException) e;
                        result.setUserxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscribe_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.subscribe(args.handle, args.theirhandle,resultHandler);
      }
    }

    public static class unsubscribe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unsubscribe_args, Void> {
      public unsubscribe() {
        super("unsubscribe");
      }

      public unsubscribe_args getEmptyArgsInstance() {
        return new unsubscribe_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unsubscribe_result result = new unsubscribe_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unsubscribe_result result = new unsubscribe_result();
            if (e instanceof NoSuchUserException) {
                        result.userx = (NoSuchUserException) e;
                        result.setUserxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unsubscribe_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unsubscribe(args.handle, args.theirhandle,resultHandler);
      }
    }

    public static class post<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, post_args, Void> {
      public post() {
        super("post");
      }

      public post_args getEmptyArgsInstance() {
        return new post_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            post_result result = new post_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            post_result result = new post_result();
            if (e instanceof NoSuchUserException) {
                        result.userx = (NoSuchUserException) e;
                        result.setUserxIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TweetTooLongException) {
                        result.longx = (TweetTooLongException) e;
                        result.setLongxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, post_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.post(args.handle, args.tweetString,resultHandler);
      }
    }

    public static class readTweetsByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readTweetsByUser_args, List<Tweet>> {
      public readTweetsByUser() {
        super("readTweetsByUser");
      }

      public readTweetsByUser_args getEmptyArgsInstance() {
        return new readTweetsByUser_args();
      }

      public AsyncMethodCallback<List<Tweet>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Tweet>>() { 
          public void onComplete(List<Tweet> o) {
            readTweetsByUser_result result = new readTweetsByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readTweetsByUser_result result = new readTweetsByUser_result();
            if (e instanceof NoSuchUserException) {
                        result.userx = (NoSuchUserException) e;
                        result.setUserxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readTweetsByUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<Tweet>> resultHandler) throws TException {
        iface.readTweetsByUser(args.handle, args.howmany,resultHandler);
      }
    }

    public static class readTweetsBySubscription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readTweetsBySubscription_args, List<Tweet>> {
      public readTweetsBySubscription() {
        super("readTweetsBySubscription");
      }

      public readTweetsBySubscription_args getEmptyArgsInstance() {
        return new readTweetsBySubscription_args();
      }

      public AsyncMethodCallback<List<Tweet>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Tweet>>() { 
          public void onComplete(List<Tweet> o) {
            readTweetsBySubscription_result result = new readTweetsBySubscription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readTweetsBySubscription_result result = new readTweetsBySubscription_result();
            if (e instanceof NoSuchUserException) {
                        result.userx = (NoSuchUserException) e;
                        result.setUserxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readTweetsBySubscription_args args, org.apache.thrift.async.AsyncMethodCallback<List<Tweet>> resultHandler) throws TException {
        iface.readTweetsBySubscription(args.handle, args.howmany,resultHandler);
      }
    }

    public static class star<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, star_args, Void> {
      public star() {
        super("star");
      }

      public star_args getEmptyArgsInstance() {
        return new star_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            star_result result = new star_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            star_result result = new star_result();
            if (e instanceof NoSuchUserException) {
                        result.userx = (NoSuchUserException) e;
                        result.setUserxIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NoSuchTweetException) {
                        result.tweetx = (NoSuchTweetException) e;
                        result.setTweetxIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, star_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.star(args.handle, args.tweetId,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class createUser_args implements org.apache.thrift.TBase<createUser_args, createUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUser_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createUser_argsTupleSchemeFactory());
    }

    public String handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_args.class, metaDataMap);
    }

    public createUser_args() {
    }

    public createUser_args(
      String handle)
    {
      this();
      this.handle = handle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_args(createUser_args other) {
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
    }

    public createUser_args deepCopy() {
      return new createUser_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
    }

    public String getHandle() {
      return this.handle;
    }

    public createUser_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_args)
        return this.equals((createUser_args)that);
      return false;
    }

    public boolean equals(createUser_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(createUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUser_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUser_argsStandardSchemeFactory implements SchemeFactory {
      public createUser_argsStandardScheme getScheme() {
        return new createUser_argsStandardScheme();
      }
    }

    private static class createUser_argsStandardScheme extends StandardScheme<createUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUser_argsTupleSchemeFactory implements SchemeFactory {
      public createUser_argsTupleScheme getScheme() {
        return new createUser_argsTupleScheme();
      }
    }

    private static class createUser_argsTupleScheme extends TupleScheme<createUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
      }
    }

  }

  public static class createUser_result implements org.apache.thrift.TBase<createUser_result, createUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUser_result");

    private static final org.apache.thrift.protocol.TField EXISTSX_FIELD_DESC = new org.apache.thrift.protocol.TField("existsx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createUser_resultTupleSchemeFactory());
    }

    public AlreadyExistsException existsx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXISTSX((short)1, "existsx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXISTSX
            return EXISTSX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXISTSX, new org.apache.thrift.meta_data.FieldMetaData("existsx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_result.class, metaDataMap);
    }

    public createUser_result() {
    }

    public createUser_result(
      AlreadyExistsException existsx)
    {
      this();
      this.existsx = existsx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_result(createUser_result other) {
      if (other.isSetExistsx()) {
        this.existsx = new AlreadyExistsException(other.existsx);
      }
    }

    public createUser_result deepCopy() {
      return new createUser_result(this);
    }

    @Override
    public void clear() {
      this.existsx = null;
    }

    public AlreadyExistsException getExistsx() {
      return this.existsx;
    }

    public createUser_result setExistsx(AlreadyExistsException existsx) {
      this.existsx = existsx;
      return this;
    }

    public void unsetExistsx() {
      this.existsx = null;
    }

    /** Returns true if field existsx is set (has been assigned a value) and false otherwise */
    public boolean isSetExistsx() {
      return this.existsx != null;
    }

    public void setExistsxIsSet(boolean value) {
      if (!value) {
        this.existsx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXISTSX:
        if (value == null) {
          unsetExistsx();
        } else {
          setExistsx((AlreadyExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXISTSX:
        return getExistsx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXISTSX:
        return isSetExistsx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_result)
        return this.equals((createUser_result)that);
      return false;
    }

    public boolean equals(createUser_result that) {
      if (that == null)
        return false;

      boolean this_present_existsx = true && this.isSetExistsx();
      boolean that_present_existsx = true && that.isSetExistsx();
      if (this_present_existsx || that_present_existsx) {
        if (!(this_present_existsx && that_present_existsx))
          return false;
        if (!this.existsx.equals(that.existsx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_existsx = true && (isSetExistsx());
      list.add(present_existsx);
      if (present_existsx)
        list.add(existsx);

      return list.hashCode();
    }

    @Override
    public int compareTo(createUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExistsx()).compareTo(other.isSetExistsx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExistsx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.existsx, other.existsx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUser_result(");
      boolean first = true;

      sb.append("existsx:");
      if (this.existsx == null) {
        sb.append("null");
      } else {
        sb.append(this.existsx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUser_resultStandardSchemeFactory implements SchemeFactory {
      public createUser_resultStandardScheme getScheme() {
        return new createUser_resultStandardScheme();
      }
    }

    private static class createUser_resultStandardScheme extends StandardScheme<createUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXISTSX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.existsx = new AlreadyExistsException();
                struct.existsx.read(iprot);
                struct.setExistsxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.existsx != null) {
          oprot.writeFieldBegin(EXISTSX_FIELD_DESC);
          struct.existsx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUser_resultTupleSchemeFactory implements SchemeFactory {
      public createUser_resultTupleScheme getScheme() {
        return new createUser_resultTupleScheme();
      }
    }

    private static class createUser_resultTupleScheme extends TupleScheme<createUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExistsx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExistsx()) {
          struct.existsx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.existsx = new AlreadyExistsException();
          struct.existsx.read(iprot);
          struct.setExistsxIsSet(true);
        }
      }
    }

  }

  public static class subscribe_args implements org.apache.thrift.TBase<subscribe_args, subscribe_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscribe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField THEIRHANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("theirhandle", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscribe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscribe_argsTupleSchemeFactory());
    }

    public String handle; // required
    public String theirhandle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle"),
      THEIRHANDLE((short)2, "theirhandle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          case 2: // THEIRHANDLE
            return THEIRHANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THEIRHANDLE, new org.apache.thrift.meta_data.FieldMetaData("theirhandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_args.class, metaDataMap);
    }

    public subscribe_args() {
    }

    public subscribe_args(
      String handle,
      String theirhandle)
    {
      this();
      this.handle = handle;
      this.theirhandle = theirhandle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_args(subscribe_args other) {
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
      if (other.isSetTheirhandle()) {
        this.theirhandle = other.theirhandle;
      }
    }

    public subscribe_args deepCopy() {
      return new subscribe_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
      this.theirhandle = null;
    }

    public String getHandle() {
      return this.handle;
    }

    public subscribe_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public String getTheirhandle() {
      return this.theirhandle;
    }

    public subscribe_args setTheirhandle(String theirhandle) {
      this.theirhandle = theirhandle;
      return this;
    }

    public void unsetTheirhandle() {
      this.theirhandle = null;
    }

    /** Returns true if field theirhandle is set (has been assigned a value) and false otherwise */
    public boolean isSetTheirhandle() {
      return this.theirhandle != null;
    }

    public void setTheirhandleIsSet(boolean value) {
      if (!value) {
        this.theirhandle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      case THEIRHANDLE:
        if (value == null) {
          unsetTheirhandle();
        } else {
          setTheirhandle((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      case THEIRHANDLE:
        return getTheirhandle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      case THEIRHANDLE:
        return isSetTheirhandle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_args)
        return this.equals((subscribe_args)that);
      return false;
    }

    public boolean equals(subscribe_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      boolean this_present_theirhandle = true && this.isSetTheirhandle();
      boolean that_present_theirhandle = true && that.isSetTheirhandle();
      if (this_present_theirhandle || that_present_theirhandle) {
        if (!(this_present_theirhandle && that_present_theirhandle))
          return false;
        if (!this.theirhandle.equals(that.theirhandle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_theirhandle = true && (isSetTheirhandle());
      list.add(present_theirhandle);
      if (present_theirhandle)
        list.add(theirhandle);

      return list.hashCode();
    }

    @Override
    public int compareTo(subscribe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTheirhandle()).compareTo(other.isSetTheirhandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTheirhandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theirhandle, other.theirhandle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscribe_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("theirhandle:");
      if (this.theirhandle == null) {
        sb.append("null");
      } else {
        sb.append(this.theirhandle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_argsStandardSchemeFactory implements SchemeFactory {
      public subscribe_argsStandardScheme getScheme() {
        return new subscribe_argsStandardScheme();
      }
    }

    private static class subscribe_argsStandardScheme extends StandardScheme<subscribe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THEIRHANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.theirhandle = iprot.readString();
                struct.setTheirhandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        if (struct.theirhandle != null) {
          oprot.writeFieldBegin(THEIRHANDLE_FIELD_DESC);
          oprot.writeString(struct.theirhandle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_argsTupleSchemeFactory implements SchemeFactory {
      public subscribe_argsTupleScheme getScheme() {
        return new subscribe_argsTupleScheme();
      }
    }

    private static class subscribe_argsTupleScheme extends TupleScheme<subscribe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        if (struct.isSetTheirhandle()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
        if (struct.isSetTheirhandle()) {
          oprot.writeString(struct.theirhandle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.theirhandle = iprot.readString();
          struct.setTheirhandleIsSet(true);
        }
      }
    }

  }

  public static class subscribe_result implements org.apache.thrift.TBase<subscribe_result, subscribe_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscribe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_result");

    private static final org.apache.thrift.protocol.TField USERX_FIELD_DESC = new org.apache.thrift.protocol.TField("userx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscribe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscribe_resultTupleSchemeFactory());
    }

    public NoSuchUserException userx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERX((short)1, "userx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERX
            return USERX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERX, new org.apache.thrift.meta_data.FieldMetaData("userx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_result.class, metaDataMap);
    }

    public subscribe_result() {
    }

    public subscribe_result(
      NoSuchUserException userx)
    {
      this();
      this.userx = userx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_result(subscribe_result other) {
      if (other.isSetUserx()) {
        this.userx = new NoSuchUserException(other.userx);
      }
    }

    public subscribe_result deepCopy() {
      return new subscribe_result(this);
    }

    @Override
    public void clear() {
      this.userx = null;
    }

    public NoSuchUserException getUserx() {
      return this.userx;
    }

    public subscribe_result setUserx(NoSuchUserException userx) {
      this.userx = userx;
      return this;
    }

    public void unsetUserx() {
      this.userx = null;
    }

    /** Returns true if field userx is set (has been assigned a value) and false otherwise */
    public boolean isSetUserx() {
      return this.userx != null;
    }

    public void setUserxIsSet(boolean value) {
      if (!value) {
        this.userx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERX:
        if (value == null) {
          unsetUserx();
        } else {
          setUserx((NoSuchUserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERX:
        return getUserx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERX:
        return isSetUserx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_result)
        return this.equals((subscribe_result)that);
      return false;
    }

    public boolean equals(subscribe_result that) {
      if (that == null)
        return false;

      boolean this_present_userx = true && this.isSetUserx();
      boolean that_present_userx = true && that.isSetUserx();
      if (this_present_userx || that_present_userx) {
        if (!(this_present_userx && that_present_userx))
          return false;
        if (!this.userx.equals(that.userx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userx = true && (isSetUserx());
      list.add(present_userx);
      if (present_userx)
        list.add(userx);

      return list.hashCode();
    }

    @Override
    public int compareTo(subscribe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserx()).compareTo(other.isSetUserx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userx, other.userx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscribe_result(");
      boolean first = true;

      sb.append("userx:");
      if (this.userx == null) {
        sb.append("null");
      } else {
        sb.append(this.userx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_resultStandardSchemeFactory implements SchemeFactory {
      public subscribe_resultStandardScheme getScheme() {
        return new subscribe_resultStandardScheme();
      }
    }

    private static class subscribe_resultStandardScheme extends StandardScheme<subscribe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userx = new NoSuchUserException();
                struct.userx.read(iprot);
                struct.setUserxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userx != null) {
          oprot.writeFieldBegin(USERX_FIELD_DESC);
          struct.userx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_resultTupleSchemeFactory implements SchemeFactory {
      public subscribe_resultTupleScheme getScheme() {
        return new subscribe_resultTupleScheme();
      }
    }

    private static class subscribe_resultTupleScheme extends TupleScheme<subscribe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserx()) {
          struct.userx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userx = new NoSuchUserException();
          struct.userx.read(iprot);
          struct.setUserxIsSet(true);
        }
      }
    }

  }

  public static class unsubscribe_args implements org.apache.thrift.TBase<unsubscribe_args, unsubscribe_args._Fields>, java.io.Serializable, Cloneable, Comparable<unsubscribe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsubscribe_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField THEIRHANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("theirhandle", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unsubscribe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unsubscribe_argsTupleSchemeFactory());
    }

    public String handle; // required
    public String theirhandle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle"),
      THEIRHANDLE((short)2, "theirhandle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          case 2: // THEIRHANDLE
            return THEIRHANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THEIRHANDLE, new org.apache.thrift.meta_data.FieldMetaData("theirhandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsubscribe_args.class, metaDataMap);
    }

    public unsubscribe_args() {
    }

    public unsubscribe_args(
      String handle,
      String theirhandle)
    {
      this();
      this.handle = handle;
      this.theirhandle = theirhandle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsubscribe_args(unsubscribe_args other) {
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
      if (other.isSetTheirhandle()) {
        this.theirhandle = other.theirhandle;
      }
    }

    public unsubscribe_args deepCopy() {
      return new unsubscribe_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
      this.theirhandle = null;
    }

    public String getHandle() {
      return this.handle;
    }

    public unsubscribe_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public String getTheirhandle() {
      return this.theirhandle;
    }

    public unsubscribe_args setTheirhandle(String theirhandle) {
      this.theirhandle = theirhandle;
      return this;
    }

    public void unsetTheirhandle() {
      this.theirhandle = null;
    }

    /** Returns true if field theirhandle is set (has been assigned a value) and false otherwise */
    public boolean isSetTheirhandle() {
      return this.theirhandle != null;
    }

    public void setTheirhandleIsSet(boolean value) {
      if (!value) {
        this.theirhandle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      case THEIRHANDLE:
        if (value == null) {
          unsetTheirhandle();
        } else {
          setTheirhandle((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      case THEIRHANDLE:
        return getTheirhandle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      case THEIRHANDLE:
        return isSetTheirhandle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsubscribe_args)
        return this.equals((unsubscribe_args)that);
      return false;
    }

    public boolean equals(unsubscribe_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      boolean this_present_theirhandle = true && this.isSetTheirhandle();
      boolean that_present_theirhandle = true && that.isSetTheirhandle();
      if (this_present_theirhandle || that_present_theirhandle) {
        if (!(this_present_theirhandle && that_present_theirhandle))
          return false;
        if (!this.theirhandle.equals(that.theirhandle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_theirhandle = true && (isSetTheirhandle());
      list.add(present_theirhandle);
      if (present_theirhandle)
        list.add(theirhandle);

      return list.hashCode();
    }

    @Override
    public int compareTo(unsubscribe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTheirhandle()).compareTo(other.isSetTheirhandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTheirhandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theirhandle, other.theirhandle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unsubscribe_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("theirhandle:");
      if (this.theirhandle == null) {
        sb.append("null");
      } else {
        sb.append(this.theirhandle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsubscribe_argsStandardSchemeFactory implements SchemeFactory {
      public unsubscribe_argsStandardScheme getScheme() {
        return new unsubscribe_argsStandardScheme();
      }
    }

    private static class unsubscribe_argsStandardScheme extends StandardScheme<unsubscribe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THEIRHANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.theirhandle = iprot.readString();
                struct.setTheirhandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsubscribe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        if (struct.theirhandle != null) {
          oprot.writeFieldBegin(THEIRHANDLE_FIELD_DESC);
          oprot.writeString(struct.theirhandle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsubscribe_argsTupleSchemeFactory implements SchemeFactory {
      public unsubscribe_argsTupleScheme getScheme() {
        return new unsubscribe_argsTupleScheme();
      }
    }

    private static class unsubscribe_argsTupleScheme extends TupleScheme<unsubscribe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsubscribe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        if (struct.isSetTheirhandle()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
        if (struct.isSetTheirhandle()) {
          oprot.writeString(struct.theirhandle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsubscribe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.theirhandle = iprot.readString();
          struct.setTheirhandleIsSet(true);
        }
      }
    }

  }

  public static class unsubscribe_result implements org.apache.thrift.TBase<unsubscribe_result, unsubscribe_result._Fields>, java.io.Serializable, Cloneable, Comparable<unsubscribe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsubscribe_result");

    private static final org.apache.thrift.protocol.TField USERX_FIELD_DESC = new org.apache.thrift.protocol.TField("userx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unsubscribe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unsubscribe_resultTupleSchemeFactory());
    }

    public NoSuchUserException userx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERX((short)1, "userx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERX
            return USERX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERX, new org.apache.thrift.meta_data.FieldMetaData("userx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsubscribe_result.class, metaDataMap);
    }

    public unsubscribe_result() {
    }

    public unsubscribe_result(
      NoSuchUserException userx)
    {
      this();
      this.userx = userx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsubscribe_result(unsubscribe_result other) {
      if (other.isSetUserx()) {
        this.userx = new NoSuchUserException(other.userx);
      }
    }

    public unsubscribe_result deepCopy() {
      return new unsubscribe_result(this);
    }

    @Override
    public void clear() {
      this.userx = null;
    }

    public NoSuchUserException getUserx() {
      return this.userx;
    }

    public unsubscribe_result setUserx(NoSuchUserException userx) {
      this.userx = userx;
      return this;
    }

    public void unsetUserx() {
      this.userx = null;
    }

    /** Returns true if field userx is set (has been assigned a value) and false otherwise */
    public boolean isSetUserx() {
      return this.userx != null;
    }

    public void setUserxIsSet(boolean value) {
      if (!value) {
        this.userx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERX:
        if (value == null) {
          unsetUserx();
        } else {
          setUserx((NoSuchUserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERX:
        return getUserx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERX:
        return isSetUserx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsubscribe_result)
        return this.equals((unsubscribe_result)that);
      return false;
    }

    public boolean equals(unsubscribe_result that) {
      if (that == null)
        return false;

      boolean this_present_userx = true && this.isSetUserx();
      boolean that_present_userx = true && that.isSetUserx();
      if (this_present_userx || that_present_userx) {
        if (!(this_present_userx && that_present_userx))
          return false;
        if (!this.userx.equals(that.userx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userx = true && (isSetUserx());
      list.add(present_userx);
      if (present_userx)
        list.add(userx);

      return list.hashCode();
    }

    @Override
    public int compareTo(unsubscribe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserx()).compareTo(other.isSetUserx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userx, other.userx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unsubscribe_result(");
      boolean first = true;

      sb.append("userx:");
      if (this.userx == null) {
        sb.append("null");
      } else {
        sb.append(this.userx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsubscribe_resultStandardSchemeFactory implements SchemeFactory {
      public unsubscribe_resultStandardScheme getScheme() {
        return new unsubscribe_resultStandardScheme();
      }
    }

    private static class unsubscribe_resultStandardScheme extends StandardScheme<unsubscribe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsubscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userx = new NoSuchUserException();
                struct.userx.read(iprot);
                struct.setUserxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsubscribe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userx != null) {
          oprot.writeFieldBegin(USERX_FIELD_DESC);
          struct.userx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsubscribe_resultTupleSchemeFactory implements SchemeFactory {
      public unsubscribe_resultTupleScheme getScheme() {
        return new unsubscribe_resultTupleScheme();
      }
    }

    private static class unsubscribe_resultTupleScheme extends TupleScheme<unsubscribe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsubscribe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserx()) {
          struct.userx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsubscribe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userx = new NoSuchUserException();
          struct.userx.read(iprot);
          struct.setUserxIsSet(true);
        }
      }
    }

  }

  public static class post_args implements org.apache.thrift.TBase<post_args, post_args._Fields>, java.io.Serializable, Cloneable, Comparable<post_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("post_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TWEET_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetString", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new post_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new post_argsTupleSchemeFactory());
    }

    public String handle; // required
    public String tweetString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle"),
      TWEET_STRING((short)2, "tweetString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          case 2: // TWEET_STRING
            return TWEET_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TWEET_STRING, new org.apache.thrift.meta_data.FieldMetaData("tweetString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(post_args.class, metaDataMap);
    }

    public post_args() {
    }

    public post_args(
      String handle,
      String tweetString)
    {
      this();
      this.handle = handle;
      this.tweetString = tweetString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public post_args(post_args other) {
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
      if (other.isSetTweetString()) {
        this.tweetString = other.tweetString;
      }
    }

    public post_args deepCopy() {
      return new post_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
      this.tweetString = null;
    }

    public String getHandle() {
      return this.handle;
    }

    public post_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public String getTweetString() {
      return this.tweetString;
    }

    public post_args setTweetString(String tweetString) {
      this.tweetString = tweetString;
      return this;
    }

    public void unsetTweetString() {
      this.tweetString = null;
    }

    /** Returns true if field tweetString is set (has been assigned a value) and false otherwise */
    public boolean isSetTweetString() {
      return this.tweetString != null;
    }

    public void setTweetStringIsSet(boolean value) {
      if (!value) {
        this.tweetString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      case TWEET_STRING:
        if (value == null) {
          unsetTweetString();
        } else {
          setTweetString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      case TWEET_STRING:
        return getTweetString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      case TWEET_STRING:
        return isSetTweetString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof post_args)
        return this.equals((post_args)that);
      return false;
    }

    public boolean equals(post_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      boolean this_present_tweetString = true && this.isSetTweetString();
      boolean that_present_tweetString = true && that.isSetTweetString();
      if (this_present_tweetString || that_present_tweetString) {
        if (!(this_present_tweetString && that_present_tweetString))
          return false;
        if (!this.tweetString.equals(that.tweetString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_tweetString = true && (isSetTweetString());
      list.add(present_tweetString);
      if (present_tweetString)
        list.add(tweetString);

      return list.hashCode();
    }

    @Override
    public int compareTo(post_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTweetString()).compareTo(other.isSetTweetString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTweetString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetString, other.tweetString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("post_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tweetString:");
      if (this.tweetString == null) {
        sb.append("null");
      } else {
        sb.append(this.tweetString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class post_argsStandardSchemeFactory implements SchemeFactory {
      public post_argsStandardScheme getScheme() {
        return new post_argsStandardScheme();
      }
    }

    private static class post_argsStandardScheme extends StandardScheme<post_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, post_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TWEET_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tweetString = iprot.readString();
                struct.setTweetStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, post_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        if (struct.tweetString != null) {
          oprot.writeFieldBegin(TWEET_STRING_FIELD_DESC);
          oprot.writeString(struct.tweetString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class post_argsTupleSchemeFactory implements SchemeFactory {
      public post_argsTupleScheme getScheme() {
        return new post_argsTupleScheme();
      }
    }

    private static class post_argsTupleScheme extends TupleScheme<post_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, post_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        if (struct.isSetTweetString()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
        if (struct.isSetTweetString()) {
          oprot.writeString(struct.tweetString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, post_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tweetString = iprot.readString();
          struct.setTweetStringIsSet(true);
        }
      }
    }

  }

  public static class post_result implements org.apache.thrift.TBase<post_result, post_result._Fields>, java.io.Serializable, Cloneable, Comparable<post_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("post_result");

    private static final org.apache.thrift.protocol.TField USERX_FIELD_DESC = new org.apache.thrift.protocol.TField("userx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LONGX_FIELD_DESC = new org.apache.thrift.protocol.TField("longx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new post_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new post_resultTupleSchemeFactory());
    }

    public NoSuchUserException userx; // required
    public TweetTooLongException longx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERX((short)1, "userx"),
      LONGX((short)2, "longx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERX
            return USERX;
          case 2: // LONGX
            return LONGX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERX, new org.apache.thrift.meta_data.FieldMetaData("userx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LONGX, new org.apache.thrift.meta_data.FieldMetaData("longx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(post_result.class, metaDataMap);
    }

    public post_result() {
    }

    public post_result(
      NoSuchUserException userx,
      TweetTooLongException longx)
    {
      this();
      this.userx = userx;
      this.longx = longx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public post_result(post_result other) {
      if (other.isSetUserx()) {
        this.userx = new NoSuchUserException(other.userx);
      }
      if (other.isSetLongx()) {
        this.longx = new TweetTooLongException(other.longx);
      }
    }

    public post_result deepCopy() {
      return new post_result(this);
    }

    @Override
    public void clear() {
      this.userx = null;
      this.longx = null;
    }

    public NoSuchUserException getUserx() {
      return this.userx;
    }

    public post_result setUserx(NoSuchUserException userx) {
      this.userx = userx;
      return this;
    }

    public void unsetUserx() {
      this.userx = null;
    }

    /** Returns true if field userx is set (has been assigned a value) and false otherwise */
    public boolean isSetUserx() {
      return this.userx != null;
    }

    public void setUserxIsSet(boolean value) {
      if (!value) {
        this.userx = null;
      }
    }

    public TweetTooLongException getLongx() {
      return this.longx;
    }

    public post_result setLongx(TweetTooLongException longx) {
      this.longx = longx;
      return this;
    }

    public void unsetLongx() {
      this.longx = null;
    }

    /** Returns true if field longx is set (has been assigned a value) and false otherwise */
    public boolean isSetLongx() {
      return this.longx != null;
    }

    public void setLongxIsSet(boolean value) {
      if (!value) {
        this.longx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERX:
        if (value == null) {
          unsetUserx();
        } else {
          setUserx((NoSuchUserException)value);
        }
        break;

      case LONGX:
        if (value == null) {
          unsetLongx();
        } else {
          setLongx((TweetTooLongException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERX:
        return getUserx();

      case LONGX:
        return getLongx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERX:
        return isSetUserx();
      case LONGX:
        return isSetLongx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof post_result)
        return this.equals((post_result)that);
      return false;
    }

    public boolean equals(post_result that) {
      if (that == null)
        return false;

      boolean this_present_userx = true && this.isSetUserx();
      boolean that_present_userx = true && that.isSetUserx();
      if (this_present_userx || that_present_userx) {
        if (!(this_present_userx && that_present_userx))
          return false;
        if (!this.userx.equals(that.userx))
          return false;
      }

      boolean this_present_longx = true && this.isSetLongx();
      boolean that_present_longx = true && that.isSetLongx();
      if (this_present_longx || that_present_longx) {
        if (!(this_present_longx && that_present_longx))
          return false;
        if (!this.longx.equals(that.longx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userx = true && (isSetUserx());
      list.add(present_userx);
      if (present_userx)
        list.add(userx);

      boolean present_longx = true && (isSetLongx());
      list.add(present_longx);
      if (present_longx)
        list.add(longx);

      return list.hashCode();
    }

    @Override
    public int compareTo(post_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserx()).compareTo(other.isSetUserx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userx, other.userx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongx()).compareTo(other.isSetLongx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longx, other.longx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("post_result(");
      boolean first = true;

      sb.append("userx:");
      if (this.userx == null) {
        sb.append("null");
      } else {
        sb.append(this.userx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longx:");
      if (this.longx == null) {
        sb.append("null");
      } else {
        sb.append(this.longx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class post_resultStandardSchemeFactory implements SchemeFactory {
      public post_resultStandardScheme getScheme() {
        return new post_resultStandardScheme();
      }
    }

    private static class post_resultStandardScheme extends StandardScheme<post_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, post_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userx = new NoSuchUserException();
                struct.userx.read(iprot);
                struct.setUserxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LONGX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.longx = new TweetTooLongException();
                struct.longx.read(iprot);
                struct.setLongxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, post_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userx != null) {
          oprot.writeFieldBegin(USERX_FIELD_DESC);
          struct.userx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.longx != null) {
          oprot.writeFieldBegin(LONGX_FIELD_DESC);
          struct.longx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class post_resultTupleSchemeFactory implements SchemeFactory {
      public post_resultTupleScheme getScheme() {
        return new post_resultTupleScheme();
      }
    }

    private static class post_resultTupleScheme extends TupleScheme<post_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, post_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserx()) {
          optionals.set(0);
        }
        if (struct.isSetLongx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserx()) {
          struct.userx.write(oprot);
        }
        if (struct.isSetLongx()) {
          struct.longx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, post_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userx = new NoSuchUserException();
          struct.userx.read(iprot);
          struct.setUserxIsSet(true);
        }
        if (incoming.get(1)) {
          struct.longx = new TweetTooLongException();
          struct.longx.read(iprot);
          struct.setLongxIsSet(true);
        }
      }
    }

  }

  public static class readTweetsByUser_args implements org.apache.thrift.TBase<readTweetsByUser_args, readTweetsByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<readTweetsByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readTweetsByUser_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOWMANY_FIELD_DESC = new org.apache.thrift.protocol.TField("howmany", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readTweetsByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readTweetsByUser_argsTupleSchemeFactory());
    }

    public String handle; // required
    public int howmany; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle"),
      HOWMANY((short)2, "howmany");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          case 2: // HOWMANY
            return HOWMANY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HOWMANY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOWMANY, new org.apache.thrift.meta_data.FieldMetaData("howmany", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readTweetsByUser_args.class, metaDataMap);
    }

    public readTweetsByUser_args() {
    }

    public readTweetsByUser_args(
      String handle,
      int howmany)
    {
      this();
      this.handle = handle;
      this.howmany = howmany;
      setHowmanyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readTweetsByUser_args(readTweetsByUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
      this.howmany = other.howmany;
    }

    public readTweetsByUser_args deepCopy() {
      return new readTweetsByUser_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
      setHowmanyIsSet(false);
      this.howmany = 0;
    }

    public String getHandle() {
      return this.handle;
    }

    public readTweetsByUser_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public int getHowmany() {
      return this.howmany;
    }

    public readTweetsByUser_args setHowmany(int howmany) {
      this.howmany = howmany;
      setHowmanyIsSet(true);
      return this;
    }

    public void unsetHowmany() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOWMANY_ISSET_ID);
    }

    /** Returns true if field howmany is set (has been assigned a value) and false otherwise */
    public boolean isSetHowmany() {
      return EncodingUtils.testBit(__isset_bitfield, __HOWMANY_ISSET_ID);
    }

    public void setHowmanyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOWMANY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      case HOWMANY:
        if (value == null) {
          unsetHowmany();
        } else {
          setHowmany((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      case HOWMANY:
        return Integer.valueOf(getHowmany());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      case HOWMANY:
        return isSetHowmany();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readTweetsByUser_args)
        return this.equals((readTweetsByUser_args)that);
      return false;
    }

    public boolean equals(readTweetsByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      boolean this_present_howmany = true;
      boolean that_present_howmany = true;
      if (this_present_howmany || that_present_howmany) {
        if (!(this_present_howmany && that_present_howmany))
          return false;
        if (this.howmany != that.howmany)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_howmany = true;
      list.add(present_howmany);
      if (present_howmany)
        list.add(howmany);

      return list.hashCode();
    }

    @Override
    public int compareTo(readTweetsByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHowmany()).compareTo(other.isSetHowmany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHowmany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.howmany, other.howmany);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readTweetsByUser_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("howmany:");
      sb.append(this.howmany);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readTweetsByUser_argsStandardSchemeFactory implements SchemeFactory {
      public readTweetsByUser_argsStandardScheme getScheme() {
        return new readTweetsByUser_argsStandardScheme();
      }
    }

    private static class readTweetsByUser_argsStandardScheme extends StandardScheme<readTweetsByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readTweetsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOWMANY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.howmany = iprot.readI32();
                struct.setHowmanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readTweetsByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HOWMANY_FIELD_DESC);
        oprot.writeI32(struct.howmany);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readTweetsByUser_argsTupleSchemeFactory implements SchemeFactory {
      public readTweetsByUser_argsTupleScheme getScheme() {
        return new readTweetsByUser_argsTupleScheme();
      }
    }

    private static class readTweetsByUser_argsTupleScheme extends TupleScheme<readTweetsByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readTweetsByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        if (struct.isSetHowmany()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
        if (struct.isSetHowmany()) {
          oprot.writeI32(struct.howmany);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readTweetsByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.howmany = iprot.readI32();
          struct.setHowmanyIsSet(true);
        }
      }
    }

  }

  public static class readTweetsByUser_result implements org.apache.thrift.TBase<readTweetsByUser_result, readTweetsByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<readTweetsByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readTweetsByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField USERX_FIELD_DESC = new org.apache.thrift.protocol.TField("userx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readTweetsByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readTweetsByUser_resultTupleSchemeFactory());
    }

    public List<Tweet> success; // required
    public NoSuchUserException userx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USERX((short)1, "userx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USERX
            return USERX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tweet.class))));
      tmpMap.put(_Fields.USERX, new org.apache.thrift.meta_data.FieldMetaData("userx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readTweetsByUser_result.class, metaDataMap);
    }

    public readTweetsByUser_result() {
    }

    public readTweetsByUser_result(
      List<Tweet> success,
      NoSuchUserException userx)
    {
      this();
      this.success = success;
      this.userx = userx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readTweetsByUser_result(readTweetsByUser_result other) {
      if (other.isSetSuccess()) {
        List<Tweet> __this__success = new ArrayList<Tweet>(other.success.size());
        for (Tweet other_element : other.success) {
          __this__success.add(new Tweet(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserx()) {
        this.userx = new NoSuchUserException(other.userx);
      }
    }

    public readTweetsByUser_result deepCopy() {
      return new readTweetsByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.userx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Tweet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Tweet elem) {
      if (this.success == null) {
        this.success = new ArrayList<Tweet>();
      }
      this.success.add(elem);
    }

    public List<Tweet> getSuccess() {
      return this.success;
    }

    public readTweetsByUser_result setSuccess(List<Tweet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NoSuchUserException getUserx() {
      return this.userx;
    }

    public readTweetsByUser_result setUserx(NoSuchUserException userx) {
      this.userx = userx;
      return this;
    }

    public void unsetUserx() {
      this.userx = null;
    }

    /** Returns true if field userx is set (has been assigned a value) and false otherwise */
    public boolean isSetUserx() {
      return this.userx != null;
    }

    public void setUserxIsSet(boolean value) {
      if (!value) {
        this.userx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Tweet>)value);
        }
        break;

      case USERX:
        if (value == null) {
          unsetUserx();
        } else {
          setUserx((NoSuchUserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USERX:
        return getUserx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USERX:
        return isSetUserx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readTweetsByUser_result)
        return this.equals((readTweetsByUser_result)that);
      return false;
    }

    public boolean equals(readTweetsByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userx = true && this.isSetUserx();
      boolean that_present_userx = true && that.isSetUserx();
      if (this_present_userx || that_present_userx) {
        if (!(this_present_userx && that_present_userx))
          return false;
        if (!this.userx.equals(that.userx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_userx = true && (isSetUserx());
      list.add(present_userx);
      if (present_userx)
        list.add(userx);

      return list.hashCode();
    }

    @Override
    public int compareTo(readTweetsByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserx()).compareTo(other.isSetUserx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userx, other.userx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readTweetsByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userx:");
      if (this.userx == null) {
        sb.append("null");
      } else {
        sb.append(this.userx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readTweetsByUser_resultStandardSchemeFactory implements SchemeFactory {
      public readTweetsByUser_resultStandardScheme getScheme() {
        return new readTweetsByUser_resultStandardScheme();
      }
    }

    private static class readTweetsByUser_resultStandardScheme extends StandardScheme<readTweetsByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readTweetsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Tweet>(_list0.size);
                  Tweet _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Tweet();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USERX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userx = new NoSuchUserException();
                struct.userx.read(iprot);
                struct.setUserxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readTweetsByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Tweet _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userx != null) {
          oprot.writeFieldBegin(USERX_FIELD_DESC);
          struct.userx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readTweetsByUser_resultTupleSchemeFactory implements SchemeFactory {
      public readTweetsByUser_resultTupleScheme getScheme() {
        return new readTweetsByUser_resultTupleScheme();
      }
    }

    private static class readTweetsByUser_resultTupleScheme extends TupleScheme<readTweetsByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readTweetsByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Tweet _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetUserx()) {
          struct.userx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readTweetsByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Tweet>(_list5.size);
            Tweet _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Tweet();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userx = new NoSuchUserException();
          struct.userx.read(iprot);
          struct.setUserxIsSet(true);
        }
      }
    }

  }

  public static class readTweetsBySubscription_args implements org.apache.thrift.TBase<readTweetsBySubscription_args, readTweetsBySubscription_args._Fields>, java.io.Serializable, Cloneable, Comparable<readTweetsBySubscription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readTweetsBySubscription_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOWMANY_FIELD_DESC = new org.apache.thrift.protocol.TField("howmany", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readTweetsBySubscription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readTweetsBySubscription_argsTupleSchemeFactory());
    }

    public String handle; // required
    public int howmany; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle"),
      HOWMANY((short)2, "howmany");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          case 2: // HOWMANY
            return HOWMANY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HOWMANY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOWMANY, new org.apache.thrift.meta_data.FieldMetaData("howmany", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readTweetsBySubscription_args.class, metaDataMap);
    }

    public readTweetsBySubscription_args() {
    }

    public readTweetsBySubscription_args(
      String handle,
      int howmany)
    {
      this();
      this.handle = handle;
      this.howmany = howmany;
      setHowmanyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readTweetsBySubscription_args(readTweetsBySubscription_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
      this.howmany = other.howmany;
    }

    public readTweetsBySubscription_args deepCopy() {
      return new readTweetsBySubscription_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
      setHowmanyIsSet(false);
      this.howmany = 0;
    }

    public String getHandle() {
      return this.handle;
    }

    public readTweetsBySubscription_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public int getHowmany() {
      return this.howmany;
    }

    public readTweetsBySubscription_args setHowmany(int howmany) {
      this.howmany = howmany;
      setHowmanyIsSet(true);
      return this;
    }

    public void unsetHowmany() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOWMANY_ISSET_ID);
    }

    /** Returns true if field howmany is set (has been assigned a value) and false otherwise */
    public boolean isSetHowmany() {
      return EncodingUtils.testBit(__isset_bitfield, __HOWMANY_ISSET_ID);
    }

    public void setHowmanyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOWMANY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      case HOWMANY:
        if (value == null) {
          unsetHowmany();
        } else {
          setHowmany((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      case HOWMANY:
        return Integer.valueOf(getHowmany());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      case HOWMANY:
        return isSetHowmany();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readTweetsBySubscription_args)
        return this.equals((readTweetsBySubscription_args)that);
      return false;
    }

    public boolean equals(readTweetsBySubscription_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      boolean this_present_howmany = true;
      boolean that_present_howmany = true;
      if (this_present_howmany || that_present_howmany) {
        if (!(this_present_howmany && that_present_howmany))
          return false;
        if (this.howmany != that.howmany)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_howmany = true;
      list.add(present_howmany);
      if (present_howmany)
        list.add(howmany);

      return list.hashCode();
    }

    @Override
    public int compareTo(readTweetsBySubscription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHowmany()).compareTo(other.isSetHowmany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHowmany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.howmany, other.howmany);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readTweetsBySubscription_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("howmany:");
      sb.append(this.howmany);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readTweetsBySubscription_argsStandardSchemeFactory implements SchemeFactory {
      public readTweetsBySubscription_argsStandardScheme getScheme() {
        return new readTweetsBySubscription_argsStandardScheme();
      }
    }

    private static class readTweetsBySubscription_argsStandardScheme extends StandardScheme<readTweetsBySubscription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readTweetsBySubscription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOWMANY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.howmany = iprot.readI32();
                struct.setHowmanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readTweetsBySubscription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HOWMANY_FIELD_DESC);
        oprot.writeI32(struct.howmany);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readTweetsBySubscription_argsTupleSchemeFactory implements SchemeFactory {
      public readTweetsBySubscription_argsTupleScheme getScheme() {
        return new readTweetsBySubscription_argsTupleScheme();
      }
    }

    private static class readTweetsBySubscription_argsTupleScheme extends TupleScheme<readTweetsBySubscription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readTweetsBySubscription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        if (struct.isSetHowmany()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
        if (struct.isSetHowmany()) {
          oprot.writeI32(struct.howmany);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readTweetsBySubscription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.howmany = iprot.readI32();
          struct.setHowmanyIsSet(true);
        }
      }
    }

  }

  public static class readTweetsBySubscription_result implements org.apache.thrift.TBase<readTweetsBySubscription_result, readTweetsBySubscription_result._Fields>, java.io.Serializable, Cloneable, Comparable<readTweetsBySubscription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readTweetsBySubscription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField USERX_FIELD_DESC = new org.apache.thrift.protocol.TField("userx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readTweetsBySubscription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readTweetsBySubscription_resultTupleSchemeFactory());
    }

    public List<Tweet> success; // required
    public NoSuchUserException userx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USERX((short)1, "userx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USERX
            return USERX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tweet.class))));
      tmpMap.put(_Fields.USERX, new org.apache.thrift.meta_data.FieldMetaData("userx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readTweetsBySubscription_result.class, metaDataMap);
    }

    public readTweetsBySubscription_result() {
    }

    public readTweetsBySubscription_result(
      List<Tweet> success,
      NoSuchUserException userx)
    {
      this();
      this.success = success;
      this.userx = userx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readTweetsBySubscription_result(readTweetsBySubscription_result other) {
      if (other.isSetSuccess()) {
        List<Tweet> __this__success = new ArrayList<Tweet>(other.success.size());
        for (Tweet other_element : other.success) {
          __this__success.add(new Tweet(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserx()) {
        this.userx = new NoSuchUserException(other.userx);
      }
    }

    public readTweetsBySubscription_result deepCopy() {
      return new readTweetsBySubscription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.userx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Tweet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Tweet elem) {
      if (this.success == null) {
        this.success = new ArrayList<Tweet>();
      }
      this.success.add(elem);
    }

    public List<Tweet> getSuccess() {
      return this.success;
    }

    public readTweetsBySubscription_result setSuccess(List<Tweet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NoSuchUserException getUserx() {
      return this.userx;
    }

    public readTweetsBySubscription_result setUserx(NoSuchUserException userx) {
      this.userx = userx;
      return this;
    }

    public void unsetUserx() {
      this.userx = null;
    }

    /** Returns true if field userx is set (has been assigned a value) and false otherwise */
    public boolean isSetUserx() {
      return this.userx != null;
    }

    public void setUserxIsSet(boolean value) {
      if (!value) {
        this.userx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Tweet>)value);
        }
        break;

      case USERX:
        if (value == null) {
          unsetUserx();
        } else {
          setUserx((NoSuchUserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USERX:
        return getUserx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USERX:
        return isSetUserx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readTweetsBySubscription_result)
        return this.equals((readTweetsBySubscription_result)that);
      return false;
    }

    public boolean equals(readTweetsBySubscription_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userx = true && this.isSetUserx();
      boolean that_present_userx = true && that.isSetUserx();
      if (this_present_userx || that_present_userx) {
        if (!(this_present_userx && that_present_userx))
          return false;
        if (!this.userx.equals(that.userx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_userx = true && (isSetUserx());
      list.add(present_userx);
      if (present_userx)
        list.add(userx);

      return list.hashCode();
    }

    @Override
    public int compareTo(readTweetsBySubscription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserx()).compareTo(other.isSetUserx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userx, other.userx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readTweetsBySubscription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userx:");
      if (this.userx == null) {
        sb.append("null");
      } else {
        sb.append(this.userx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readTweetsBySubscription_resultStandardSchemeFactory implements SchemeFactory {
      public readTweetsBySubscription_resultStandardScheme getScheme() {
        return new readTweetsBySubscription_resultStandardScheme();
      }
    }

    private static class readTweetsBySubscription_resultStandardScheme extends StandardScheme<readTweetsBySubscription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readTweetsBySubscription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Tweet>(_list8.size);
                  Tweet _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Tweet();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USERX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userx = new NoSuchUserException();
                struct.userx.read(iprot);
                struct.setUserxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readTweetsBySubscription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Tweet _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userx != null) {
          oprot.writeFieldBegin(USERX_FIELD_DESC);
          struct.userx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readTweetsBySubscription_resultTupleSchemeFactory implements SchemeFactory {
      public readTweetsBySubscription_resultTupleScheme getScheme() {
        return new readTweetsBySubscription_resultTupleScheme();
      }
    }

    private static class readTweetsBySubscription_resultTupleScheme extends TupleScheme<readTweetsBySubscription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readTweetsBySubscription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Tweet _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetUserx()) {
          struct.userx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readTweetsBySubscription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Tweet>(_list13.size);
            Tweet _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Tweet();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userx = new NoSuchUserException();
          struct.userx.read(iprot);
          struct.setUserxIsSet(true);
        }
      }
    }

  }

  public static class star_args implements org.apache.thrift.TBase<star_args, star_args._Fields>, java.io.Serializable, Cloneable, Comparable<star_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("star_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TWEET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new star_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new star_argsTupleSchemeFactory());
    }

    public String handle; // required
    public long tweetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE((short)1, "handle"),
      TWEET_ID((short)2, "tweetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE
            return HANDLE;
          case 2: // TWEET_ID
            return TWEET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TWEETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TWEET_ID, new org.apache.thrift.meta_data.FieldMetaData("tweetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(star_args.class, metaDataMap);
    }

    public star_args() {
    }

    public star_args(
      String handle,
      long tweetId)
    {
      this();
      this.handle = handle;
      this.tweetId = tweetId;
      setTweetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public star_args(star_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHandle()) {
        this.handle = other.handle;
      }
      this.tweetId = other.tweetId;
    }

    public star_args deepCopy() {
      return new star_args(this);
    }

    @Override
    public void clear() {
      this.handle = null;
      setTweetIdIsSet(false);
      this.tweetId = 0;
    }

    public String getHandle() {
      return this.handle;
    }

    public star_args setHandle(String handle) {
      this.handle = handle;
      return this;
    }

    public void unsetHandle() {
      this.handle = null;
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return this.handle != null;
    }

    public void setHandleIsSet(boolean value) {
      if (!value) {
        this.handle = null;
      }
    }

    public long getTweetId() {
      return this.tweetId;
    }

    public star_args setTweetId(long tweetId) {
      this.tweetId = tweetId;
      setTweetIdIsSet(true);
      return this;
    }

    public void unsetTweetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TWEETID_ISSET_ID);
    }

    /** Returns true if field tweetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTweetId() {
      return EncodingUtils.testBit(__isset_bitfield, __TWEETID_ISSET_ID);
    }

    public void setTweetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TWEETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((String)value);
        }
        break;

      case TWEET_ID:
        if (value == null) {
          unsetTweetId();
        } else {
          setTweetId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE:
        return getHandle();

      case TWEET_ID:
        return Long.valueOf(getTweetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE:
        return isSetHandle();
      case TWEET_ID:
        return isSetTweetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof star_args)
        return this.equals((star_args)that);
      return false;
    }

    public boolean equals(star_args that) {
      if (that == null)
        return false;

      boolean this_present_handle = true && this.isSetHandle();
      boolean that_present_handle = true && that.isSetHandle();
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (!this.handle.equals(that.handle))
          return false;
      }

      boolean this_present_tweetId = true;
      boolean that_present_tweetId = true;
      if (this_present_tweetId || that_present_tweetId) {
        if (!(this_present_tweetId && that_present_tweetId))
          return false;
        if (this.tweetId != that.tweetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handle = true && (isSetHandle());
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_tweetId = true;
      list.add(present_tweetId);
      if (present_tweetId)
        list.add(tweetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(star_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTweetId()).compareTo(other.isSetTweetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTweetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetId, other.tweetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("star_args(");
      boolean first = true;

      sb.append("handle:");
      if (this.handle == null) {
        sb.append("null");
      } else {
        sb.append(this.handle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tweetId:");
      sb.append(this.tweetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class star_argsStandardSchemeFactory implements SchemeFactory {
      public star_argsStandardScheme getScheme() {
        return new star_argsStandardScheme();
      }
    }

    private static class star_argsStandardScheme extends StandardScheme<star_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, star_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.handle = iprot.readString();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TWEET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tweetId = iprot.readI64();
                struct.setTweetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, star_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handle != null) {
          oprot.writeFieldBegin(HANDLE_FIELD_DESC);
          oprot.writeString(struct.handle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TWEET_ID_FIELD_DESC);
        oprot.writeI64(struct.tweetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class star_argsTupleSchemeFactory implements SchemeFactory {
      public star_argsTupleScheme getScheme() {
        return new star_argsTupleScheme();
      }
    }

    private static class star_argsTupleScheme extends TupleScheme<star_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, star_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandle()) {
          optionals.set(0);
        }
        if (struct.isSetTweetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandle()) {
          oprot.writeString(struct.handle);
        }
        if (struct.isSetTweetId()) {
          oprot.writeI64(struct.tweetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, star_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handle = iprot.readString();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tweetId = iprot.readI64();
          struct.setTweetIdIsSet(true);
        }
      }
    }

  }

  public static class star_result implements org.apache.thrift.TBase<star_result, star_result._Fields>, java.io.Serializable, Cloneable, Comparable<star_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("star_result");

    private static final org.apache.thrift.protocol.TField USERX_FIELD_DESC = new org.apache.thrift.protocol.TField("userx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TWEETX_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new star_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new star_resultTupleSchemeFactory());
    }

    public NoSuchUserException userx; // required
    public NoSuchTweetException tweetx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERX((short)1, "userx"),
      TWEETX((short)2, "tweetx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERX
            return USERX;
          case 2: // TWEETX
            return TWEETX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERX, new org.apache.thrift.meta_data.FieldMetaData("userx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TWEETX, new org.apache.thrift.meta_data.FieldMetaData("tweetx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(star_result.class, metaDataMap);
    }

    public star_result() {
    }

    public star_result(
      NoSuchUserException userx,
      NoSuchTweetException tweetx)
    {
      this();
      this.userx = userx;
      this.tweetx = tweetx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public star_result(star_result other) {
      if (other.isSetUserx()) {
        this.userx = new NoSuchUserException(other.userx);
      }
      if (other.isSetTweetx()) {
        this.tweetx = new NoSuchTweetException(other.tweetx);
      }
    }

    public star_result deepCopy() {
      return new star_result(this);
    }

    @Override
    public void clear() {
      this.userx = null;
      this.tweetx = null;
    }

    public NoSuchUserException getUserx() {
      return this.userx;
    }

    public star_result setUserx(NoSuchUserException userx) {
      this.userx = userx;
      return this;
    }

    public void unsetUserx() {
      this.userx = null;
    }

    /** Returns true if field userx is set (has been assigned a value) and false otherwise */
    public boolean isSetUserx() {
      return this.userx != null;
    }

    public void setUserxIsSet(boolean value) {
      if (!value) {
        this.userx = null;
      }
    }

    public NoSuchTweetException getTweetx() {
      return this.tweetx;
    }

    public star_result setTweetx(NoSuchTweetException tweetx) {
      this.tweetx = tweetx;
      return this;
    }

    public void unsetTweetx() {
      this.tweetx = null;
    }

    /** Returns true if field tweetx is set (has been assigned a value) and false otherwise */
    public boolean isSetTweetx() {
      return this.tweetx != null;
    }

    public void setTweetxIsSet(boolean value) {
      if (!value) {
        this.tweetx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERX:
        if (value == null) {
          unsetUserx();
        } else {
          setUserx((NoSuchUserException)value);
        }
        break;

      case TWEETX:
        if (value == null) {
          unsetTweetx();
        } else {
          setTweetx((NoSuchTweetException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERX:
        return getUserx();

      case TWEETX:
        return getTweetx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERX:
        return isSetUserx();
      case TWEETX:
        return isSetTweetx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof star_result)
        return this.equals((star_result)that);
      return false;
    }

    public boolean equals(star_result that) {
      if (that == null)
        return false;

      boolean this_present_userx = true && this.isSetUserx();
      boolean that_present_userx = true && that.isSetUserx();
      if (this_present_userx || that_present_userx) {
        if (!(this_present_userx && that_present_userx))
          return false;
        if (!this.userx.equals(that.userx))
          return false;
      }

      boolean this_present_tweetx = true && this.isSetTweetx();
      boolean that_present_tweetx = true && that.isSetTweetx();
      if (this_present_tweetx || that_present_tweetx) {
        if (!(this_present_tweetx && that_present_tweetx))
          return false;
        if (!this.tweetx.equals(that.tweetx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userx = true && (isSetUserx());
      list.add(present_userx);
      if (present_userx)
        list.add(userx);

      boolean present_tweetx = true && (isSetTweetx());
      list.add(present_tweetx);
      if (present_tweetx)
        list.add(tweetx);

      return list.hashCode();
    }

    @Override
    public int compareTo(star_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserx()).compareTo(other.isSetUserx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userx, other.userx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTweetx()).compareTo(other.isSetTweetx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTweetx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetx, other.tweetx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("star_result(");
      boolean first = true;

      sb.append("userx:");
      if (this.userx == null) {
        sb.append("null");
      } else {
        sb.append(this.userx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tweetx:");
      if (this.tweetx == null) {
        sb.append("null");
      } else {
        sb.append(this.tweetx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class star_resultStandardSchemeFactory implements SchemeFactory {
      public star_resultStandardScheme getScheme() {
        return new star_resultStandardScheme();
      }
    }

    private static class star_resultStandardScheme extends StandardScheme<star_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, star_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userx = new NoSuchUserException();
                struct.userx.read(iprot);
                struct.setUserxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TWEETX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tweetx = new NoSuchTweetException();
                struct.tweetx.read(iprot);
                struct.setTweetxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, star_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userx != null) {
          oprot.writeFieldBegin(USERX_FIELD_DESC);
          struct.userx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tweetx != null) {
          oprot.writeFieldBegin(TWEETX_FIELD_DESC);
          struct.tweetx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class star_resultTupleSchemeFactory implements SchemeFactory {
      public star_resultTupleScheme getScheme() {
        return new star_resultTupleScheme();
      }
    }

    private static class star_resultTupleScheme extends TupleScheme<star_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, star_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserx()) {
          optionals.set(0);
        }
        if (struct.isSetTweetx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserx()) {
          struct.userx.write(oprot);
        }
        if (struct.isSetTweetx()) {
          struct.tweetx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, star_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userx = new NoSuchUserException();
          struct.userx.read(iprot);
          struct.setUserxIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tweetx = new NoSuchTweetException();
          struct.tweetx.read(iprot);
          struct.setTweetxIsSet(true);
        }
      }
    }

  }

}
