#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from cse124 import Twitter
from cse124.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping()')
  print('  void createUser(string handle)')
  print('  void subscribe(string handle, string theirhandle)')
  print('  void unsubscribe(string handle, string theirhandle)')
  print('  void post(string handle, string tweetString)')
  print('   readTweetsByUser(string handle, i32 howmany)')
  print('   readTweetsBySubscription(string handle, i32 howmany)')
  print('  void star(string handle, i64 tweetId)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Twitter.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'createUser':
  if len(args) != 1:
    print('createUser requires 1 args')
    sys.exit(1)
  pp.pprint(client.createUser(args[0],))

elif cmd == 'subscribe':
  if len(args) != 2:
    print('subscribe requires 2 args')
    sys.exit(1)
  pp.pprint(client.subscribe(args[0],args[1],))

elif cmd == 'unsubscribe':
  if len(args) != 2:
    print('unsubscribe requires 2 args')
    sys.exit(1)
  pp.pprint(client.unsubscribe(args[0],args[1],))

elif cmd == 'post':
  if len(args) != 2:
    print('post requires 2 args')
    sys.exit(1)
  pp.pprint(client.post(args[0],args[1],))

elif cmd == 'readTweetsByUser':
  if len(args) != 2:
    print('readTweetsByUser requires 2 args')
    sys.exit(1)
  pp.pprint(client.readTweetsByUser(args[0],eval(args[1]),))

elif cmd == 'readTweetsBySubscription':
  if len(args) != 2:
    print('readTweetsBySubscription requires 2 args')
    sys.exit(1)
  pp.pprint(client.readTweetsBySubscription(args[0],eval(args[1]),))

elif cmd == 'star':
  if len(args) != 2:
    print('star requires 2 args')
    sys.exit(1)
  pp.pprint(client.star(args[0],eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
